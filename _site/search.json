[
  {
    "objectID": "posts/002-tweets-from-heads-of-governments-and-states/index.html",
    "href": "posts/002-tweets-from-heads-of-governments-and-states/index.html",
    "title": "Tweets from heads of governments and states",
    "section": "",
    "text": "Since October 2018, I have been maintaining a bot written in Python and running on a Raspberry Pi 3B+ that collects tweets from heads of governments (worldwide) followed by https://twitter.com/headoffice. It was an excellent exercise learning Python, Twitter API, SQLite database, and using a Raspberry Pi for hobby projects. I have now released the data on Kaggle at https://doi.org/10.34740/KAGGLE/DSV/4208877for the community to use.\nThe dataset contains an Excel workbook per year with data points on the rows and features on the columns. Features include the timestamp (UTC), language in which the tweet is written, user id, user name, tweet id, and tweet text. The first version includes the data from October 2018 until September 15, 2022. After that, future releases will be quarterly. It is a textual dataset and is primarily useful for analyses related to natural language processing.\nIn the Kaggle submission, I have also included a notebook (https://www.kaggle.com/code/rohitfarmer/dont-run-tweet-collection-and-preprocessing) with the Python code that collected the tweets and the additional code that I used to pre-process the data before submission. After releasing the first data set, I updated the code and moved the bot from Python to R using the rtweet library instead of tweepy. I found rtweet to perform better, especially in filtering out duplicated tweets.\nIn the current setup (https://github.com/rohitfarmer/government-tweets) that is still running on my Raspberry Pi 3B+, the main bot script runs every fifteen minutes via crontab and fetches data that is more recent than the latest tweet collected in the previous run. The data is stored in an SQLite database which is backed up to MEGA cloud storage via Rclone once every midnight ET.\nI enjoyed the process of creating the bot and being able to run it for a couple of years, and I hope I will soon find some time to look into the data and fetch some exciting insights. But, until then, the data is available to the data science community to utilize as they please. So, please open a discussion on the Kaggle page for questions, comments, or collaborations."
  },
  {
    "objectID": "posts/005-classify-the-bitter-or-sweet-taste-of-compounds/index.html",
    "href": "posts/005-classify-the-bitter-or-sweet-taste-of-compounds/index.html",
    "title": "Classify the bitter or sweet taste of compounds",
    "section": "",
    "text": "Originally posted on Kaggle at https://www.kaggle.com/datasets/rohitfarmer/classify-the-bitter-or-sweet-taste-of-compounds\n\nContext\nThroughout human evolution, we have been drawn toward sweet-tasting foods and averted from bitter tastes - sweet is good or desirable, bitter is undesirable, ear wax or medicinal. Therefore, a better understanding of molecular features that determine the bitter-sweet taste of substances is crucial for identifying natural and synthetic compounds for various purposes.\n\n\nSources\nThis dataset https://doi.org/10.34740/KAGGLE/DSV/4234193 is adapted from https://github.com/cosylabiiit/bittersweet, https://www.nature.com/articles/s41598-019-43664-y. In chemoinformatics, molecules are often represented as compact SMILES strings. In this dataset, SMILES structures, along with their names and targets (bitter, sweet, tasteless, and non-bitter), were obtained from the original study. Subsequently, SMILES were converted into canonical SMILES using RDKit, and the features (molecular descriptors, both 2D and 3D) were calculated using Mordred. Secondly, tasteless and non-bitter categories were merged into a single category of non-bitter-sweet. Finally, since many of the compounds were missing names, IUPAC names were fetched using PubChemPy for all the compounds, and for still missing names, a generic compound + incrementor name was assigned.\n\n\nInspiration\nThis is a classification dataset with the first three columns carrying names, SMILES, and canonical SMILES. Any of these columns can be used to refer to a molecule. The fourth column is the target (taste category). And all numeric features are from the 5th column until the end of the file. Many features have cells with string annotations due to errors produced by Mordred. Therefore, the following data science techniques can be learned while working on this dataset:\n\nData cleanup\nFeatures selection (since the number of features is quite large in proportion to the data points)\nFeature scaling/transformation/normalization\nDimensionality reduction\nBinomial classification (bitter vs. sweet) - utilize non-bitter-sweet as a negative class.\nMultinomial classification (bitter vs. sweet vs. non-bitter-sweet)\nSince SMILES can be converted into molecular graphs, graph-based modeling should also be possible.\n\n\n\nInitial data preparation\nA copy of the original dataset and the scripts and notebooks used to convert SMILES to canonical SMILES, generate features, fetch names, and export the final TSV file for Kaggle is loosely maintained at https://github.com/rohitfarmer/bittersweet."
  },
  {
    "objectID": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html",
    "href": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html",
    "title": "How to use Neovim or VIM editor as an IDE for R",
    "section": "",
    "text": "Note: This tutorial is written for Linux based systems."
  },
  {
    "objectID": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#requirements",
    "href": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#requirements",
    "title": "How to use Neovim or VIM editor as an IDE for R",
    "section": "Requirements",
    "text": "Requirements\n\nR >= 3.0.0\nTo install the latest version of R please follow the download and install instructions at https://cloud.r-project.org/\n\n\nNeovim >= 0.2.0\nNeovim (nvim) is the continuation and extension of Vim editor with the aim to keep the good parts of Vim and add more features. In this tutorial I will be using Neovim (nvim), however, most of the steps are equally applicable to Vim also. Please follow download and installation instructions on nvim’s GitHub wiki https://github.com/neovim/neovim/wiki/Installing-Neovim.\nOR\n\n\nVim >= 8.1\nVim usually comes installed in most of the Linux based operating system. However, it may not be the latest one. Therefore, to install the latest version please download and install it from Vim’s GitHub repository as mentioned below or a method that is more confortable to you.\ngit clone https://github.com/vim/vim.git\nmake -C vim/\nsudo make install -C vim/\n\n\nPlugin Manager\nThere are more than one plugin manager’s available for Vim that can be used to install the required plugins. In this tutorial I will be using vim-plug pluggin manager.\n\n\nPlugins\nIn the end below are the plugins that we would need to convert Vim editor into a fully functional IDE for R.\n\nNvim-R: https://github.com/jalvesaq/Nvim-R\n\nNvim-R is the main plugin that will add the functionality to execute R code from within the Vim editor.\n\nNcm-R: https://github.com/gaalcaras/ncm-R\n\nNcm-R adds synchronous auto completion features for R.\nIt is based on ncm2 and nvim-yarp plugins.\n\nNerd Tree: https://github.com/preservim/nerdtree\n\nNerd Tree will be used to toggle file explorer in the side panel.\n\nDelimitMate: https://github.com/Raimondi/delimitMate\n\nThis plug-in provides automatic closing of quotes, parenthesis, brackets, etc.\n\nVim-monokai-tasty: https://github.com/patstockwell/vim-monokai-tasty\n\nMonokai color scheme inspired by Sublime Text’s interpretation of monokai.\n\nLightline.vim: https://github.com/itchyny/lightline.vim\n\nLineline.vim adds asthetic enhancements to Vim’s statusline/tabline."
  },
  {
    "objectID": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#procedure",
    "href": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#procedure",
    "title": "How to use Neovim or VIM editor as an IDE for R",
    "section": "Procedure",
    "text": "Procedure\n\nMake sure that you have R >=3.0.0 installed.\nMake sure that you have Neovim >= 0.2.0 installed.\nInstall the vim-plug plugin manager.\n\ncurl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n\nInstall the required plugins.\n\nFirst, create an init.vim file in ~/.config/nvim folder (create the folder if it doesn’t exist). This file is equivalent to a .vimrc file in the traditional Vim environment. To init.vim file start adding:\n\" Specify a directory for plugins\n\" - Avoid using standard Vim directory names like 'plugin'\ncall plug#begin('~/.vim/plugged')\n\n\" List of plugins.\n\" Make sure you use single quotes\n\n\" Shorthand notation\nPlug 'jalvesaq/Nvim-R'\nPlug 'ncm2/ncm2'\nPlug 'roxma/nvim-yarp'\nPlug 'gaalcaras/ncm-R'\nPlug 'preservim/nerdtree'\nPlug 'Raimondi/delimitMate'\nPlug 'patstockwell/vim-monokai-tasty'\nPlug 'itchyny/lightline.vim'\n\n\" Initialize plugin system\ncall plug#end()\n\nUpdate and add more features to the init.vim file.\n\n\" Set a Local Leader\n\n\" With a map leader it's possible to do extra key combinations\n\" like <leader>w saves the current file\nlet mapleader = \",\"\nlet g:mapleader = \",\"\n\n\n\" Plugin Related Settings\n\n\" NCM2\nautocmd BufEnter * call ncm2#enable_for_buffer()    \" To enable ncm2 for all buffers.\nset completeopt=noinsert,menuone,noselect           \" :help Ncm2PopupOpen for more\n                                                    \" information.\n\n\" NERD Tree\nmap <leader>nn :NERDTreeToggle<CR>                  \" Toggle NERD tree.\n\n\" Monokai-tasty\nlet g:vim_monokai_tasty_italic = 1                  \" Allow italics.\ncolorscheme vim-monokai-tasty                       \" Enable monokai theme.\n\n\" LightLine.vim \nset laststatus=2              \" To tell Vim we want to see the statusline.\nlet g:lightline = {\n   \\ 'colorscheme':'monokai_tasty',\n   \\ }\n\n\n\" General NVIM/VIM Settings\n\n\" Mouse Integration\nset mouse=i                   \" Enable mouse support in insert mode.\n\n\" Tabs & Navigation\nmap <leader>nt :tabnew<cr>    \" To create a new tab.\nmap <leader>to :tabonly<cr>     \" To close all other tabs (show only the current tab).\nmap <leader>tc :tabclose<cr>    \" To close the current tab.\nmap <leader>tm :tabmove<cr>     \" To move the current tab to next position.\nmap <leader>tn :tabn<cr>        \" To swtich to next tab.\nmap <leader>tp :tabp<cr>        \" To switch to previous tab.\n\n\n\" Line Numbers & Indentation\nset backspace=indent,eol,start  \" To make backscape work in all conditions.\nset ma                          \" To set mark a at current cursor location.\nset number                      \" To switch the line numbers on.\nset expandtab                   \" To enter spaces when tab is pressed.\nset smarttab                    \" To use smart tabs.\nset autoindent                  \" To copy indentation from current line \n                                \" when starting a new line.\nset si                          \" To switch on smart indentation.\n\n\n\" Search\nset ignorecase                  \" To ignore case when searching.\nset smartcase                   \" When searching try to be smart about cases.\nset hlsearch                    \" To highlight search results.\nset incsearch                   \" To make search act like search in modern browsers.\nset magic                       \" For regular expressions turn magic on.\n\n\n\" Brackets\nset showmatch                   \" To show matching brackets when text indicator \n                                \" is over them.\nset mat=2                       \" How many tenths of a second to blink \n                                \" when matching brackets.\n\n\n\" Errors\nset noerrorbells                \" No annoying sound on errors.\n\n\n\" Color & Fonts\nsyntax enable                   \" Enable syntax highlighting.\nset encoding=utf8                \" Set utf8 as standard encoding and \n                                 \" en_US as the standard language.\n\n\" Enable 256 colors palette in Gnome Terminal.\nif $COLORTERM == 'gnome-terminal'\n    set t_Co=256\nendif\n\ntry\n    colorscheme desert\ncatch\nendtry\n\n\n\" Files & Backup\nset nobackup                     \" Turn off backup.\nset nowb                         \" Don't backup before overwriting a file.\nset noswapfile                   \" Don't create a swap file.\nset ffs=unix,dos,mac             \" Use Unix as the standard file type.\n\n\n\" Return to last edit position when opening files\nau BufReadPost * if line(\"'\\\"\") > 1 && line(\"'\\\"\") <= line(\"$\") | exe \"normal! g'\\\"\" | endif"
  },
  {
    "objectID": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#frequently-used-keyboard-shortcutscommands",
    "href": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#frequently-used-keyboard-shortcutscommands",
    "title": "How to use Neovim or VIM editor as an IDE for R",
    "section": "Frequently Used Keyboard Shortcuts/Commands",
    "text": "Frequently Used Keyboard Shortcuts/Commands\nNote: The commands below are according to the init.vim settings mentioned in this Gist.\n# Nvim-R\n\\rf               \" Connect to R console.\n\\rq               \" Quit R console.\n\\ro               \" Open object bowser.\n\\d                \" Execute current line of code and move to the next line.\n\\ss               \" Execute a block of selected code.\n\\aa               \" Execute the entire script. This is equivalent to source().\n\\xx               \" Toggle comment in an R script.\n\n# NERDTree\n,nn               \" Toggle NERDTree."
  },
  {
    "objectID": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#example-code",
    "href": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#example-code",
    "title": "How to use Neovim or VIM editor as an IDE for R",
    "section": "Example Code",
    "text": "Example Code\nlibrary(tidyverse)\n# \\rf               \" Connect to R console.\n# \\rq               \" Quit R console.\n# \\ro               \" Open object bowser.\n# \\d \\ss \\aa        \" Execution modes. \n# ?help\n# ,nn               \" NERDTree.\n# ,nt, tp, tn       \" Tab navigation.\n\ntheme_set(theme_bw())\ndata(\"midwest\", package = \"ggplot2\")\n\ngg  <- ggplot(midwest, aes(x=area, y = poptotal)) +\n        geom_point(aes(col = state, size = popdensity)) +\n        geom_smooth(method = \"loess\", se = F) +\n        xlim(c(0, 0.1)) +\n        ylim(c(0, 500000)) +\n        labs(subtitle = \"Area Vs Population\",\n             y = \"Population\",\n             x = \"Area\",\n             title = \"Scatterplot\",\n             caption = \"Source: midwest\")\n\nplot(gg) # Opens an external window with the plot.\n\nmidwest$county # To show synchronous auto completion. \n\nView(midwest) # Opens an external window to display a portion of the tibble."
  },
  {
    "objectID": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#add-colour-etc.-to-vim-in-a-screen-session-optional",
    "href": "posts/004-how-to-use-neovim-or-vim-editor-as-an-ide-for-r/index.html#add-colour-etc.-to-vim-in-a-screen-session-optional",
    "title": "How to use Neovim or VIM editor as an IDE for R",
    "section": "Add Colour etc. to VIM in a Screen Session (optional)",
    "text": "Add Colour etc. to VIM in a Screen Session (optional)\nAdd these lines to ~/.screenrc file.\n# Use 256 colors\nattrcolor b \".I\"    # allow bold colors - necessary for some reason\ntermcapinfo xterm 'Co#256:AB=\\E[48;5;%dm:AF=\\E[38;5;%dm'   # tell screen how to set colors. AB = background, AF=foreground\ndefbce on    # use current bg color for erased chars]]'\n\n# Informative statusbar\nhardstatus off\nhardstatus alwayslastline\nhardstatus string '%{= kG}[ %{G}%H %{g}][%= %{= kw}%?%-Lw%?%{r}(%{W}%n*%f%t%?(%u)%?%{r})%{w}%?%+Lw%?%?%= %{g}][%{B} %m-%d %{W} %c %{g}]'\n\n# Use X scrolling mechanism\ntermcapinfo xterm* ti@:te@\n\n# Fix for residual editor text\naltscreen on"
  },
  {
    "objectID": "posts/003-how-to-download-a-shared-file-from-googledrive-in-r/index.html",
    "href": "posts/003-how-to-download-a-shared-file-from-googledrive-in-r/index.html",
    "title": "How to download a shared file from Google Drive in R",
    "section": "",
    "text": "To download a shared file with “anyone with the link” access rights from Google Drive in R, we can utilize the googledrive library from the tidyverse package. The method described here will utilize the file ID copied from the shared link. Typically googledrive package is used to work with a Google Drive of an authenticated user. However, since we are downloading a publicly shared file in this tutorial, we will work without user authentication. So, please follow the steps below.\n\n\nBelow is a share link from my Google Drive pointing to an R data frame.\nhttps://drive.google.com/file/d/1vj607etanUVYzVFj_HXkznHTd0Ltv_Y4/view?usp=sharing\nThis string 1vj607etanUVYzVFj_HXkznHTd0Ltv_Y4 is the file ID that we will use to download.\n\n\n\n\nif(!require(googledrive)) install.packages(\"googledrive\")\nlibrary(googledrive)\n\ndrive_deauth()\ndrive_user()\npublic_file <-  drive_get(as_id(\"1vj607etanUVYzVFj_HXkznHTd0Ltv_Y4\"))\ndrive_download(public_file, overwrite = TRUE)\n\nFile downloaded:\n• hdstim-example-data.rds <id: 1vj607etanUVYzVFj_HXkznHTd0Ltv_Y4>\nSaved locally as:\n• hdstim-example-data.rds\nThe downloaded data frame.\n\nlibrary(DT)\ndatatable(head(readRDS(\"hdstim-example-data.rds\")))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data All The Way",
    "section": "",
    "text": "Welcome to “data all the way,” a tutorial website with concepts, methods, and example code on various data science, statistics, and machine learning topics. This website, for me, is an attempt to deepen my understanding of data science by teaching core concepts and practical code. I intend to write blog posts that are as complete and explanatory as possible. However, many posts could just be codes with a minimal description initially, eventually evolving into more comprehensive articles. Therefore, most of the posts here are in a state of continuous development. If you want to get involved and help improve an article, please leave a comment or open a pull request at https://github.com/rohitfarmer/dataalltheway. To learn more about my other projects and research, please visit https://www.rohitfarmer.com."
  },
  {
    "objectID": "index.html#featured-posts",
    "href": "index.html#featured-posts",
    "title": "Data All The Way",
    "section": "Featured posts",
    "text": "Featured posts"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nOct 15, 2022\n\n\nClassify the bitter or sweet taste of compounds\n\n\nRohit Farmer\n\n\n\n\nOct 15, 2022\n\n\nHow to use Neovim or VIM editor as an IDE for R\n\n\nRohit Farmer\n\n\n\n\nOct 14, 2022\n\n\nHow to download a shared file from Google Drive in R\n\n\nRohit Farmer\n\n\n\n\nOct 5, 2022\n\n\nTweets from heads of governments and states\n\n\nRohit Farmer\n\n\n\n\n\n\nNo matching items"
  }
]