{
  "hash": "93dc07deb23358ab51ce3d6dc17c698d",
  "result": {
    "markdown": "---\ntitle: \"Parametric hypothesis tests with examples in Python\"\ndescription: \"A tutorial on parametric hypothesis tests with examples in Python.\"\nauthor: \n    - name: \"Rohit Farmer\"\n      orcid: \"\"\ndate: \"2022-12-22\"\ncategories: [How To, Parametric Tests, T-test, Z-test, F-test, ANOVA, Python]\nformat:\n  html:\n    code-fold: false\n    code-tools:\n      source: false\n      toggle: true\ncitation: true\ngoogle-scholar: true\ndraft: true\n---\n\n::: {.callout-note collapse=\"true\"}\n### Update history\n\n2022-11-17 First draft\n:::\n\n# Introduction\n\nThis article is an extension of [Rohit Farmer. 2022. \"Parametric Hypothesis Tests with Examples in R.\" November 10, 2022](https://www.dataalltheway.com/posts/010-parametric-hypothesis-tests-r). Please check out the parent article for the theoretical background.\n\n-   Z-test (@sec-z-test)\n-   T-test (@sec-t-test)\n-   F-test (@sec-f-test)\n\n## Import packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy import stats\nimport pandas as pd\n\ndat = pd.read_csv(\"https://raw.githubusercontent.com/opencasestudies/ocs-bp-rural-and-urban-obesity/master/data/wrangled/BMI_long.csv\")\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Sample data\nsample_1 = [1, 2, 3, 4, 5]\nsample_2 = [2, 3, 4, 5, 6]\n\n# Perform t-test\nt_statistic, p_value = stats.ttest_ind(sample_1, sample_2)\n\n# Print results\nprint(\"t-statistic:\", t_statistic)\nprint(\"p-value:\", p_value)\n\n# Interpret results\nif p_value < 0.05:\n    print(\"The difference between the samples is significant (p < 0.05).\")\nelse:\n    print(\"The difference between the samples is not significant (p >= 0.05).\")\n\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt-statistic: -1.0\np-value: 0.34659350708733416\nThe difference between the samples is not significant (p >= 0.05).\n```\n:::\n:::\n\n\n# Getting the data\n\nSome cleaning is necessary since the data is not of the correct types.\n\n\n```{julia}\nbegin\n\tdata = CSV.read(download(\"https://raw.githubusercontent.com/opencasestudies/ocs-bp-rural-and-urban-obesity/master/data/wrangled/BMI_long.csv\"), DataFrame) # download and load\n\tallowmissing!(data, :BMI) # Allow BMI col to have missing values\n\treplace!(data.BMI, \"NA\" => missing) # Convert \"NA\" to missing\n\tdata[!, :BMI] .= passmissing(parse).(Float64, (data[!, :BMI])) # Typecast into Float64?\nend;\n```\n\n```{julia}\nfirst(data, 20)\n```\n\n\n# Z-test {#sec-z-test}\n\n## Two sample unpaired z-test\n\n\n```{julia}\nuneqvarztest = let\n\t# Fetch a random sample of BMI data for women in the year 1985 and 2017\n\tx1 = filter([:Sex, :Year] => (s, y) -> s==\"Women\" && y==1985 , data) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx2 = filter([:Sex, :Year] => (s, y) -> s==\"Women\" && y==2017 , data) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tUnequalVarianceZTest(x1, x2)\nend\n```\n\n\n## Two sample paired z-test\n\n\n```{julia}\neqvarztest = let\n\t# Fetch a random sample of BMI data for women in the year 1985 and 2017\n\tx1 = filter([:Sex, :Year] => (s, y) -> s==\"Women\" && y==1985 , data) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx2 = filter([:Sex, :Year] => (s, y) -> s==\"Women\" && y==2017 , data) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tEqualVarianceZTest(x1, x2)\nend\n```\n\n\n# T-test {#sec-t-test}\n\n## One sample t-test\n\n\n```{julia}\nonesamplettest = let \n\tx1 = filter(\n\t\t[:Sex, :Region, :Year] => \n\t\t\t(s, r, y) -> s==\"Men\" && r==\"Rural\" && y == 2017,\n\t\tdata\n\t) |>\n\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tOneSampleTTest(x1, 24.5)\nend\n```\n\n\n## Two sample unpaired (independent) t-test\n\n\n```{julia}\nunpairedtwosamplettest = let \n    x1 = filter([:Sex, :Region, :Year] => \n            (s, r, y) -> s==\"Women\" && r==\"Rural\" && y == 1985,\n        data) |>\n        x -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n    x2 = filter([:Sex, :Region, :Year] => \n            (s, r, y) -> s==\"Women\" && r==\"Urban\" && y == 1985,\n        data) |>\n        x -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n    x -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n    UnequalVarianceTTest(x1, x2)\nend\n```\n\n\n::: callout-warning\n## Welch's Test\n\nThis test uses the Welch correction, and there is no way to turn it off in `HypothesisTests.jl`.\n:::\n\n### Only considering right tailed (one-tailed)\n\n\n```{julia}\nunpairedtwosamplettest = let \n\tx1 = filter([:Sex, :Region, :Year] => \n\t\t\t(s, r, y) -> s==\"Women\" && r==\"Rural\" && y == 1985,\n\t\tdata) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx2 = filter([:Sex, :Region, :Year] => \n\t\t\t(s, r, y) -> s==\"Women\" && r==\"Urban\" && y == 1985,\n\t\tdata) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tUnequalVarianceTTest(x1, x2)\nend\npvalue(unpairedtwosamplettest, tail=:right)\n```\n\n\n## Two sample paired (dependent) t-test\n\n\n```{julia}\npairedtwosamplettest = let \n\tx1 = filter([:Sex, :Region, :Year] => \n\t\t\t(s, r, y) -> s==\"Women\" && r==\"Rural\" && y == 1985,\n\t\tdata) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx2 = filter([:Sex, :Region, :Year] => \n\t\t\t(s, r, y) -> s==\"Women\" && r==\"Urban\" && y == 1985,\n\t\tdata) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tEqualVarianceTTest(x1, x2)\nend\n```\n\n\n# F-test {#sec-f-test}\n\n\n```{julia}\nFtest = let \n\tx1 = filter([:Sex, :Region, :Year] => \n\t\t\t(s, r, y) -> s==\"Women\" && r==\"Rural\" && y == 1985,\n\t\tdata) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx2 = filter([:Sex, :Region, :Year] => \n\t\t\t(s, r, y) -> s==\"Women\" && r==\"Urban\" && y == 1985,\n\t\tdata) |>\n\t\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tx -> x[!, :BMI] |> skipmissing |> collect |> x->rand(x, 300)\n\tVarianceFTest(x1, x2)\nend\n```\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}