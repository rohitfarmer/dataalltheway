{
  "hash": "079817ee4d47fc45171f16bbe30eab07",
  "result": {
    "markdown": "---\ntitle: \"Parametric hypothesis tests with examples in Python\"\ndescription: \"A tutorial on parametric hypothesis tests with examples in Python.\"\nauthor: \n    - name: \"Rohit Farmer\"\n      orcid: \"\"\ndate: \"2023-01-09\"\ncategories: [How To, Parametric Tests, T-test, Z-test, F-test, ANOVA, Python]\nformat:\n  html:\n    code-fold: false\n    code-tools:\n      source: false\n      toggle: true\ncitation: true\ngoogle-scholar: true\n---\n\n::: {.callout-note collapse=\"true\"}\n### Update history\n\n2023-01-09 First draft\n:::\n\n# Introduction\n\nThis article is an extension of [Rohit Farmer. 2022. \"Parametric Hypothesis Tests with Examples in R.\" November 10, 2022](https://www.dataalltheway.com/posts/010-parametric-hypothesis-tests-r). Please check out the parent article for the theoretical background.\n\n-   Z-test (@sec-z-test)\n-   T-test (@sec-t-test)\n-   ANOVA (@sec-anova)\n\n## Import packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom scipy import stats\nimport pandas as pd\n\ndat = pd.read_csv(\"https://raw.githubusercontent.com/opencasestudies/ocs-bp-rural-and-urban-obesity/master/data/wrangled/BMI_long.csv\")\n```\n:::\n\n\n# Z-test {#sec-z-test}\n\n## Example code for a two sample unpaired z-test\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfrom statsmodels.stats.weightstats import ztest as ztest\nimport random\n\nmask1 = (dat['Sex'] == \"Women\") & (dat['Year'] == 1985)\nx1 = dat[mask1]['BMI']\nx1 = x1.array.dropna()\nx1 = random.sample(x1.tolist(), k = 300)\n\nmask2 = (dat['Sex'] == \"Women\") & (dat['Year'] == 2017)\nx2 = dat[mask2]['BMI']\nx2 = x2.array.dropna()\nx2 = random.sample(x2.tolist(), k = 300)\n\nz_statistics, p_value = ztest(x1, x2, value=0) \n\nprint(\"z-statistic:\", z_statistics)\nprint(\"p-value:\", p_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nz-statistic: -9.201889936608346\np-value: 3.517084717411295e-20\n```\n:::\n:::\n\n\n# T-test {#sec-t-test}\n\n## Example code for a two-tailed t-test\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nmask1 = (dat['Sex'] == \"Women\") & (dat['Region'] == \"Rural\") & (dat['Year'] == 1985)\nx1 = dat[mask1]['BMI']\n\nmask2 = (dat['Sex'] == \"Women\") & (dat['Region'] == \"Urban\") & (dat['Year'] == 1985)\nx2 = dat[mask2]['BMI']\n\nt_statistic, p_value = stats.ttest_ind(x1, x2, equal_var = True, nan_policy = \"omit\")\n\nprint(\"t-statistic:\", t_statistic)\nprint(\"p-value:\", p_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt-statistic: -3.8952336023562912\np-value: 0.00011523146459551333\n```\n:::\n:::\n\n\n## Example code for a one-tailed t-test\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nt_statistic, p_value = stats.ttest_ind(x1, x2, equal_var = True, nan_policy = \"omit\", alternative = \"greater\")\n\nprint(\"t-statistic:\", t_statistic)\nprint(\"p-value:\", p_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt-statistic: -3.8952336023562912\np-value: 0.9999423842677022\n```\n:::\n:::\n\n\n## Two sample paired (dependent) t-test\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nt_statistic, p_value = stats.ttest_rel(x1, x2, nan_policy = \"omit\")\n\nprint(\"t-statistic:\", t_statistic)\nprint(\"p-value:\", p_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt-statistic: -14.095486243034763\np-value: 1.426675846865914e-31\n```\n:::\n:::\n\n\n# ANOVA {#sec-anova}\n\n## Example code for a oneway ANOVA\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nmask1 = (dat['Sex'] == \"Men\") & (dat['Region'] == \"Rural\") & (dat['Year'] == 2017)\nx1 = dat[mask1]['BMI']\n\nmask2 = (dat['Sex'] == \"Men\") & (dat['Region'] == \"Urban\") & (dat['Year'] == 2017)\nx2 = dat[mask2]['BMI']\n\nmask3 = (dat['Sex'] == \"Men\") & (dat['Region'] == \"National\") & (dat['Year'] == 2017)\nx3 = dat[mask3]['BMI']\n\nf_value, p_value = stats.f_oneway(x1.array.dropna(), x2.array.dropna(), x3.array.dropna())\n\nprint(\"f-value statistic: \",f_value)\nprint(\"p-value: \", p_value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nf-value statistic:  3.4215235158825905\np-value:  0.033309935710150805\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}