{
  "hash": "bb34950bc33f8c4a77f95dddf43a33c1",
  "result": {
    "markdown": "---\ntitle: \"Non-parametric hypothesis tests with examples in R\"\ndescription: \"A tutorial on non-parametric hypothesis tests with examples in R.\"\nauthor: \n  - name: \"Rohit Farmer\"\n    orcid: \"0000-0003-4197-3047\"\ndate: \"2022-11-15\"\ncategories: [How To, Non-parametric Tests, Wilcoxon Test, Mann Whitney U Test]\nformat:\n  html:\n    code-fold: false\n    code-tools:\n      source: false\n      toggle: true\ncitation: true\ngoogle-scholar: true\nbibliography: references.bib\ndraft: true\n---\n\n\n::: {.callout-note collapse=\"true\"}\n### Update history\n\n2022-11-15 First draft with live code on Kaggle.\n:::\n\n# Introduction\n\nA hypothesis test is a statistical test used to determine whether there is enough evidence to support a hypothesis. For example, there is a difference between the average height of males and females. Non-parametric hypothesis tests are tests that do not rely on the assumptions of normality or equal variance. They are traditional alternatives to parametric tests because they make few or no assumptions about the distribution of the data or population. Many non-parametric tests are based on ranks given to the original numerical scores/data. Usually non-parametric tests are regarded as relatively easy to perform but some problems can occur. It can be cumbersome to carry out such tests when working with large amounts of data. In many field of study such as psychology, the data have quite restricted ranges of scores, which can result in the same value appearing several times in a set of data. Tests based on rank can become more complicated with increased tied scores. Though, non-parametric tests have fewer assumptions they are not as powerful as parametric tests.\n\nThe different types of non-parametric hypothesis tests are:\n\n-   the Wilcoxon rank-sum (Mann-Whitney U test) (@sec-mann-u-test),\n-   the Wilcoxon signed-rank test (@sec-signed-rank-test), and\n-   the Kruskal-Wallis test.\n\n## Dataset\n\nFor our example exercises we will work with \"Global CO~2~ emissions from cement production\" dataset [@andrew2022]. I have subsetted the data to include rows from the year 1928 onward and dropped any column that either had all NAs or zeros. Table below shows all the data that we will use in this tutorial.\n\n@fig-co2-emission shows per country yearly (x-axis) emissions logged to base 10 (y-axis). The log is taken visualization purposes only all the statistical calculations will be done on the original values.\n\n::: callout-note\nThe emissions from use of fossil fuels in cement production are not included in this dataset since they are usually included elsewhere in global datasets of fossil CO~2~ emissions. The process emissions in this dataset, which result from the decomposition of carbonates in the production of cement clinker, amounted to \\~1.7 Gt CO~2~ in 2021, while emissions from combustion of fossil fuels to produce the heat required amounted to an additional \\~1.0 Gt CO~2~ in 2021.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuppressMessages(library(DT))\nsuppressMessages(library(tidyverse))\nsuppressMessages(library(kableExtra))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- readr::read_csv(\"https://zenodo.org/record/7081360/files/1.%20Cement_emissions_data.csv\", show_col_types = FALSE)\ndat <- dat %>% dplyr::filter(Year >= 1928) %>%\n  select_if(function(x) all(!is.na(x))) %>%\n  select_if(function(x) all(!x == 0))\nDT::datatable(dat)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-aa67305ef96a86e63020\" style=\"width:100%;height:auto;\" class=\"datatables html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-aa67305ef96a86e63020\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\"],[1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021],[116.3,174.4,189,265.3,247.1,254.5,279.8,356.3,410.7,512.3,614.3,556,534.4,577.9,530.7,472.3,534.2,537.9,563.3,672.5,617.8,716,777.7,770.5,766.8,817.7,843.1,923.1,1021,1170,1221,1170,1305,1436,1446,1254,1439,1632,1723,1756,2064,2148,2344,2736,2699,2570,2675,2715,2842,2987,3148,3328,3562,3323,2815,2818,2619,2326,2790,3170,3048,2254,1822,2196,2495,2761,3050,2621,2422,3169,3283,3290,2771,2481,1729,2280,2701,3241,3764,3998,3990,3810,4178,4586,4184,4581,4336,4571,4029,4362,4369,4141,3508,4671],[378,356.2,348.9,196.3,123.6,159.9,207.2,276.2,323.5,363.4,178.1,338,348.8,341.6,279.8,196.2,218.1,348.9,363.4,443.4,508.8,530.6,632.4,610.6,672.3,788.7,944.9,984.9,1058,1148,1214,1294,1381,1414,1450,1541,1792,1879,1817,1890,1941,2130,2228,2314,2436,2591,2568,2473,2494,2474,2459,2581,2652,2954,2823,2377,2683,2891,2908,2878,3136,3380,3463,3183,2923,3005,3484,3358,3244,3185,3475,3520,3621,3541,3488,3584,3555,3664,3888,3972,3863,3829,3549,3496,3518,3294,3138,3076,2931,3019,2942,3040,2820,2820],[1505,1606,1508,1218,1039,963.1,937.6,1087,1163,1486,1508,1261,105.4,312.5,250.8,229,298,319.8,934,1290,1646,1446,1759,2173,2032,2286,2162,2319,2304,2326,2006,2195,2170,2351,2366,2326,2889,2918,2864,2875,2838,3100,3325,3397,3442,3390,3563,3252,3515,3602,3480,3508,3372,2988,2796,2505,2473,2376,2446,2393,2683,2768,2824,2880,3089,3082,3179,3255,3009,3162,3175,3113,3270,2957,2993,2933,2837,2934,3112,3087,3033,2795,2582,2762,2643,2541,2643,2348,2436,2291,2534,2819,2634,2634],[43.61,47.25,43.58,83.59,72.69,109,159.9,181.6,239.7,283.5,305.5,345.5,367.1,378,370.5,370.5,399.8,381.6,406.8,450.7,548.8,632.1,686.9,719.6,799.4,1003,1236,1370,1617,1679,1872,1897,2210,2309,2462,2493,2679,2651,2825,2965,3337,3552,4047,4407,5117,6023,6707,7525,8608,9496,10800,11340,12080,11930,11560,9252,8246,8759,10500,10660,10500,10510,11060,11780,9770,10160,10090,11530,13880,15270,16180,16440,16050,15230,14390,13100,13270,14350,15440,17200,18880,19030,21290,22840,25000,26650,26910,25080,22420,19080,19340,19860,22050,23790],[868.6,963,926.7,799.5,363.4,189,272.6,272.6,388.9,483.4,432.5,450.7,592.4,657.8,716,574.2,563.3,665.1,908.5,937.6,1108,1250,1312,1334,1454,1744,1759,1973,2253,2711,2758,2817,2595,2784,3086,3144,3547,3747,4001,3583,3660,3700,3562,4068,4477,4995,5135,4933,4767,4776,5113,5833,5208,5034,4182,3906,4276,5063,5270,6259,5986,6263,5823,4771,4804,4893,5769,6529,6185,6657,6828,7118,7232,6983,7148,7248,7520,7614,7728,7731,6988,5364,6005,6020,6532,5973,5912,6185,6114,6827,6915,7125,6625,6625],[54.57,72.62,79.88,50.88,54.51,69.05,101.7,141.6,123.5,156.3,181.7,167.2,189,178.1,181.6,185.3,178.1,203.5,287.1,298,265.5,243.5,254.4,345.3,403.4,378,381.6,396.1,381.7,359.8,359.8,414.3,414.3,436.1,505.3,577.9,625.1,585.1,675.8,610.4,610.7,708.7,1010,663.5,658,641.8,652.7,455,423.2,483.9,495.2,557.1,636.4,732,435.1,471.6,511.2,509,498.5,540,619.8,642.5,659.2,773.1,849,860.1,935.3,991.8,961.2,945.9,1131,950.8,1010,1013,1079,1113,1194,1152,1236,1316,1307,1081,1046,1080,1128,1086,1022,1033,1120,865.9,782.2,825.3,825.3,825.3],[39.78,76.51,73.45,97.93,79.57,113.2,97.93,156.1,428.5,437.7,9.18,223.4,272.4,495.8,654.9,639.6,489.7,18.36,85.69,174.4,82.64,274.7,586.9,1036,1203,1615,1915,1873,2660,2855,3871,5107,6514,2585,2497,3355,5032,6801,8387,6085,5253,7613,10720,13120,14720,15460,15340,19100,19250,22910,26810,30320,32710,33900,38870,44130,50070,59300,67360,75430,84960,84890,84510,101300,122400,142800,164400,184600,192900,202900,211400,228300,244400,270800,296600,345200,380000,411600,470100,515000,525900,583600,639600,708600,714800,748300,778600,722000,743000,758200,786700,826900,858200,853000],[21.81,29.07,32.71,21.81,7.27,3.63,3.63,3.63,3.63,3.77,7.5,17.44,11.45,21.81,32.71,32.71,43.61,37.13,39.98,57.5,61.78,72.69,87.22,101.8,119.7,123.4,170.8,199.9,225.3,229,192.4,170.8,98.13,68.94,98.13,120.1,112.9,123.4,130.8,145.4,145.4,159.9,207.2,225.3,236.2,265.3,308.9,308.9,319.8,238,224.7,211.7,205.7,227,247.7,231.4,238.3,193.6,191,210.5,207.7,189.7,189.3,102.5,71.22,60.89,67.73,95.74,98.04,50.77,54.34,64.38,68.33,80.94,106.3,132.2,160.1,206.6,203.8,205.3,158.1,177.2,189,175.2,157.9,174,127.9,154.6,98.04,348.7,406.1,451,451,451],[385.2,396.1,385.2,250.8,203.6,272.6,381.6,374.3,392.4,334.4,316.2,345.3,218.1,207.2,214.4,316.2,319.8,109,247.1,312.5,381.5,410.8,432.5,487,599.8,621.5,603.3,621.5,585.1,574.2,527,687,712.2,781.4,806.7,752.3,937.6,984.9,1036,1087,1127,1290,1287,1357,1432,1444,1251,1126,1189,1171,1337,1233,984.3,825.1,915.6,857.8,868.6,910,1064,993.8,888.7,1063,882.4,1088,1193,1206,1192,1204,1282,1343,1390,1355,1385,1388,1416,1330,1459,1363,1395,1407,1155,764.4,672.2,861.8,871.1,867.1,887.3,931.5,1095,1194,1160,1129,1227,1227],[43.8,87.22,148.5,119.9,119.9,141.7,145.4,189,167.2,163.5,185.3,185,178.1,207.2,207.2,159.9,210.6,214.4,290.7,319.8,378,439.7,505.2,559.7,468.8,541.5,661.6,676,668.7,723.2,748.7,883.1,1010,1018,1105,1239,1247,1196,1207,1359,1555,1785,1820,1937,1890,1788,1614,1770,1658,1604,1474,1450,1483,1710,2076,2676,3157,2787,3681,4221,4715,6000,6767,7855,8100,7596,7615,8325,8780,9215,9787,10820,11170,11750,12720,11890,12690,14150,15570,17100,16190,19970,20510,20100,20970,20210,20760,21650,22820,21770,21000,19670,18130,16160],[138.1,138.1,101.6,79.95,76.23,80.05,112.7,134.3,163.5,203.4,236.2,279.6,149,152.6,87.22,116.4,87.22,137.3,163.5,207.2,276.2,323.5,367.3,410.9,385.1,461.8,512.2,516.1,476.1,468.8,457.9,577.9,621.5,665.2,672.2,705.1,777.7,875.9,777.7,748.7,730.4,886.8,926.8,903.3,969.8,1018,1065,991.5,869.8,812.2,803.8,819.5,845.3,840.1,855.1,869.9,747.7,726.3,636,635.2,666.8,701.2,729.2,568.9,473.5,361.3,363.6,377.9,381.4,450,447.8,478.6,504.8,503.6,484.9,466.6,528.8,542.2,573.9,605.5,619.8,385.3,525.7,557.8,497.2,481.8,468.8,462.1,553.2,603.7,601.7,583.5,569.7,569.7],[1519,1730,1723,1519,1545,1756,2013,2086,1890,2155,2279,2526,2373,1381,1108,846.4,668,563.8,999.4,1363,1555,1995,2475,2758,3289,3871,4328,5270,5604,5906,6338,7120,7915,8911,9969,10920,11290,10230,11080,12980,14560,15490,16350,15560,16210,17410,17230,16080,16890,17570,17400,17680,18600,18290,17300,16880,16080,15430,14940,15310,15380,15790,15850,15690,16430,14070,13790,15310,13990,14230,14540,15280,15860,16390,16290,16940,17410,17400,17470,17910,16130,13340,13280,12580,10070,8877,8339,8196,7680,7711,7757,7912,7059,7059],[1897,2112,1853,1788,1843,2366,2304,2904,3082,2984,2729,2508,2101,2882,2151,1861,1465,577.9,457.9,610.6,919.5,1621,2206,3238,3518,4332,5277,5222,6436,7501,7407,8533,11140,12180,14230,14800,16300,16160,18910,21240,23560,25400,28270,29270,32530,38190,35610,31800,33230,35240,40740,41980,41900,40260,38150,38100,37000,34050,33190,33190,35840,36700,38700,40350,41670,41220,42300,42140,42560,39930,35360,35010,35090,34370,32420,31940,31280,32280,31990,30660,28550,25310,24320,24980,25620,26810,26560,25940,25970,26430,26180,25330,24490,23790],[7.27,10.9,10.9,10.9,10.9,10.18,7.27,7.27,7.27,7.27,11.99,14.54,14.54,14.54,10.9,15.66,13.63,16.87,13.63,17.1,18.17,23.26,25.34,39.98,39.98,43.61,50.72,69.24,76.5,83.59,87.22,105.4,109,105.4,87.38,83.59,90.86,109,112.7,123.6,141.7,149,196.3,207.2,232.6,301.6,229,138.1,104.4,156.3,154.5,128.4,109.6,108.3,160.7,188.4,199.2,87.04,31.83,31.3,27.9,30.59,32.43,32.79,12.28,8.17,24.48,24.44,73.22,89.36,85.98,87.46,109.2,106.7,196.5,239.7,218.8,194.2,237.5,257.5,286.2,299.2,340.9,373.3,452.7,505.6,585.9,614.2,947.8,910.6,930,1011,1011,1011],[158.3,159.1,160.2,109.7,117.3,110.8,123.6,130.8,149,159.9,163.6,192.6,167.2,156.3,185.5,152.6,159.8,69.05,214.4,232.6,261.6,294.4,287.1,345.1,348.8,374.5,381.6,396.1,443.4,501.5,508.8,559.7,570.6,628.7,697.8,712.3,763.2,792.3,901.3,1065,1134,1232,1290,1357,1351,1352,1309,1347,1334,1152,1113,1095,1100,917.6,892.6,834.5,772.7,803,877.4,822.9,716.4,691.2,634,592,653,838,845,875,863,922,900,892,890,853,875,904,716,780,805,869,833,842,754,749,725,731,727,672,684,766,730,722,725,701.3],[25.42,25.43,10.9,14.54,10.9,14.53,21.82,29.07,36.34,39.96,50.86,58.18,61.78,83.59,94.49,101.8,123.6,130.8,127.2,127.2,138.2,141.7,163.4,178.1,181.6,221.7,239.7,268.9,272.6,268.9,298,287.1,297.9,294.4,345.3,374.2,403.4,501.7,526.8,537.9,548.8,563.2,559.8,714.1,798.9,1157,931.5,928.8,955,934.4,978.5,1157,1044,1478,1239,937.2,927.5,834,1044,1222,1184,987.2,1025,1027,973,1161,1471,1751,1771,1974,1987,1734,1778,1806,1827,1845,2132,2376,2612,2730,2939,3330,3338,3300,3731,4257,4590,4476,4340,4291,4320,4546,4546,4546],[36.34,43.61,47.29,47.25,58.15,79.95,90.94,105.4,119.9,127.1,130.8,145.4,134.5,134.5,119.9,123.4,120.1,130.8,159.9,210.8,247.1,258,283.5,316.4,359.8,381.6,385.2,385,505.2,483.4,505.2,508.8,592.4,614.2,694.1,708.7,802.9,828.6,850.4,901.3,919.5,1007,1152,1207,1358,1603,1636,1655,1771,2036,2411,2406,2675,2635,2740,2770,2512,2420,2437,2604,2607,2629,3176,3271,3136,3195,3292,3462,3388,3561,3537,3827,3809,3627,3910,3616,4004,4088,4000,4166,4012,3223,3376,2813,2550,2814,3096,2921,2297,2531,2251,2225,2310,2310],[163.6,156.3,196.3,98.14,105.4,109,156.3,189,185.3,225.3,221.7,261.7,196.3,305.2,181.7,225.3,159.9,123.6,156.2,207.2,221.7,276.2,319.8,563.4,741.4,937.8,792.3,955.9,1036,1163,1272,1410,1508,1635,1723,2159,2348,2671,2907,3129,3474,3714,4016,4201,4531,4830,5476,5623,6371,6737,7115,7534,7522,7085,7187,6679,6683,5819,6742,6763,6818,6243,4445,3201,2906,2833,2771,3146,3200,3005,2916,2645,2656,2768,2642,2650,2992,3175,3656,4054,4143,3093,2778,3089,3150,2695,2944,3337,3181,3310,3505,3828,3901,3901],[763.2,901.3,908.4,806.8,705.1,694.1,672.3,668.7,297.9,189,294.4,588.8,770.5,810.4,814.1,839.5,912.1,952.2,1061,1079,1152,1112,1247,1356,1465,1610,1883,2141,2337,2457,2631,2831,2835,3275,3605,3831,4201,4790,5967,6658,7392,8064,8253,8433,9562,10860,10740,11560,12020,13270,14250,13080,13040,13300,13600,14000,11550,10920,10780,10250,11250,12040,12280,11700,10440,9914,11500,12360,12110,12750,13810,14430,14730,15010,15530,16040,16290,16790,16740,16820,14390,11400,11200,9523,8754,7642,8897,9216,9414,9449,9667,9064,8192,8609],[233.2,284,304.6,257.9,241,200.7,287.1,367.1,392.5,432.5,490.6,585.1,345.3,319.7,407,457.8,523.3,600.1,723.2,766.8,734.1,839.5,963,1007,1047,1163,1217,1261,1232,1210,1239,1396,1388,1504,1519,1632,1792,1864,1857,1926,1933,1955,2013,1955,1922,2094,1648,1556,1433,1311,1180,1201,1233,1168,1163,1136,1212,1080,1044,1148,1150,1246,1272,1137,1089,1092,1109,1296,1225,1105,1133,1139,1288,1332,1280,1206,1284,1315,1442,1339,1396,1263,1324,1361,1479,1402,1399,1537,1554,1484,1607,1349,1272,1272],[29.07,32.71,29.07,50.83,54.46,58.15,83.59,65.42,69.05,105.4,130.9,141.7,130.9,134.6,105.4,83.59,141.7,141.7,159.9,174.4,170.8,185.3,196.3,196.2,225.3,261.7,349,407.1,479.7,625.1,748.8,857.5,1007,1003,1148,1334,1454,1646,1912,2100,2337,2864,3151,3703,4107,4332,4294,5103,5850,6507,7167,6389,5926,6873,7156,6119,7028,7793,8798,9593,9821,10220,10440,12020,13270,13050,13490,14130,14660,15100,15290,14590,15180,15090,15510,16020,17210,19120,20840,22780,24850,27040,29980,31450,31370,33910,34500,34440,37530,39470,39410,32350,40810,44390],[15420,15000,14290,10810,6656,5587,6900,6684,9950,10370,9239,10790,11550,14520,16090,12040,8032,9114,14650,16650,18420,18790,20120,22040,22260,23520,24130,26580,28390,27010,27760,30230,28800,28700,29880,31440,33030,33290,34570,33590,35320,35700,34920,35510,36520,36920,36810,30460,32370,33980,35620,35940,32920,31960,28440,30440,32910,31710,32850,32980,33250,33260,33480,32740,32990,34840,36310,37080,37310,38560,39460,40240,41450,41610,43160,43350,45890,46190,46850,45510,41420,29610,31450,32210,35270,36370,39440,39910,39440,40320,38970,40900,40690,41200],[35616,36873,35561,30931,24721,23866,28542,32090,38763,40829,38551,35687,31431,43293,38376,34810,22664,22991,36330,43192,51684,58264,66979,75839,80841,89628,97231,107570,116620,122610,129780,145340,157490,164230,176440,186060,206220,216490,233050,239910,255400,270790,288410,303340,321550,340510,341030,339120,354150,370870,394690,399880,402620,402750,400940,409880,417700,422770,440350,459190,483610,493500,493850,507750,528940,551510,588460,622440,635310,661230,658610,691010,721930,754330,796050,852250,910570,964310,1051700,1129400,1143700,1175700,1254900,1349800,1384600,1444100,1499900,1444400,1487600,1507900,1569200,1617500,1637500,1672900]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Year<\\/th>\\n      <th>Argentina<\\/th>\\n      <th>Australia<\\/th>\\n      <th>Belgium<\\/th>\\n      <th>Brazil<\\/th>\\n      <th>Canada<\\/th>\\n      <th>Chile<\\/th>\\n      <th>China<\\/th>\\n      <th>Democratic Republic of the Congo<\\/th>\\n      <th>Denmark<\\/th>\\n      <th>Egypt<\\/th>\\n      <th>Finland<\\/th>\\n      <th>Italy<\\/th>\\n      <th>Japan<\\/th>\\n      <th>Mozambique<\\/th>\\n      <th>Norway<\\/th>\\n      <th>Peru<\\/th>\\n      <th>Portugal<\\/th>\\n      <th>Romania<\\/th>\\n      <th>Spain<\\/th>\\n      <th>Sweden<\\/th>\\n      <th>Turkey<\\/th>\\n      <th>USA<\\/th>\\n      <th>Global<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]},{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_gather <- dat %>% gather(key = \"Country\", value = \"Emission\", -Year)\nggplot(dat_gather, aes(x = Year, y = as.numeric(log10(Emission)), color = Country)) +\n  geom_line(aes(group = Country)) + \n  labs(x = \"Year\", y = \"log10(Emission)\", color = \"\") +theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))\n```\n\n::: {.cell-output-display}\n![Global CO~2~ emissions from cement production](index_files/figure-html/fig-co2-emission-1.png){#fig-co2-emission width=672}\n:::\n:::\n\n\n# Wilcoxon rank-sum (Mann-Whitney U test) {#sec-mann-u-test}\n\nThe Wilcoxon rank-sum or Mann-Whitney U test is perhaps the most common non-parametric test for unrelated samples of scores. You would use it when the two groups are independent of each other, for example in our dataset testing differences in CO~2~ emissions between two different countries (e.g. USA vs. Canada). It can be used even when the two groups are of different sizes.\n\n## The Method\n\n-   Similar to any hypothesis testing first, we state our null and alternative hypotheses.\n-   Next, we rank all of the values (from both groups) from the smallest to largest. Equal values are allocated the average of the ranks they would have if there was tiny differences between them.\n-   Next we sum the ranks for each group. You call the sum of the ranks for the larger group $R_1$ and for the smaller sized group, $R_2$. If both groups are equally sized then we can label them whichever way round we like.\n-   We then input $R_1$ and $R_2$ and also $N_1$ and $N_2$, the respective sizes of each group, into the @eq-u-test.\n\n$$\n\\begin{equation} U = (N_1 \\times N_2) + \\dfrac{N_1 \\times (N_1+1)}{2} - R_1 \\end{equation}\n$$ {#eq-u-test}\n\n-   Then we compare the value of $U$ to significance tables. You find the intersection of the column with the value of $N_1$ and the row with the value of $N_2$. In this intersection there will be two ranges of values of $U$ which are significant at the $5%$ level. If our value is within one of these ranges, then we have a significant result and we reject the null hypothesis. If our value is not in the range then it is not significant and then the independent variable is unrelated to the dependent variable, we accept the $H_0$.\n-   As a check, we also need to examine the means of the two groups, to see which has the higher scores on the dependent variable.\n\n## Example code for a two-tailed test in R\n\nIn this example we will do a two-tailed test to measure if there is a difference in emission between the USA and Canada. Our null hypothesis $H_0$ is that there is no difference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(w_res <- wilcox.test(dat$USA, dat$Canada, conf.int = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  dat$USA and dat$Canada\nW = 8763, p-value < 2.2e-16\nalternative hypothesis: true location shift is not equal to 0\n95 percent confidence interval:\n 26384 29797\nsample estimates:\ndifference in location \n              28155.27 \n```\n:::\n:::\n\n::: {#tbl-u-test-two-sided .cell tbl-cap='Two-tailed Wilcoxon rank sum test between Co~2~ emissions from the USA and Canada'}\n\n```{.r .cell-code}\nbroom::tidy(w_res) %>%\n  kbl() %>%\n  kable_paper(\"hover\", full_width = F)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper lightable-hover\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> estimate </th>\n   <th style=\"text-align:right;\"> statistic </th>\n   <th style=\"text-align:right;\"> p.value </th>\n   <th style=\"text-align:right;\"> conf.low </th>\n   <th style=\"text-align:right;\"> conf.high </th>\n   <th style=\"text-align:left;\"> method </th>\n   <th style=\"text-align:left;\"> alternative </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 28155.27 </td>\n   <td style=\"text-align:right;\"> 8763 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 26384 </td>\n   <td style=\"text-align:right;\"> 29797 </td>\n   <td style=\"text-align:left;\"> Wilcoxon rank sum test with continuity correction </td>\n   <td style=\"text-align:left;\"> two.sided </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Example code for a one-tailed test in R\n\nIn this example we will do a one-tailed test to measure if emissions from the USA is greater than Canada. Our null hypothesis $H_0$ is that the emissions from the USA is not greater than Canada.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(w_res <- wilcox.test(dat$USA, dat$Canada, conf.int = TRUE, alternative = \"greater\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon rank sum test with continuity correction\n\ndata:  dat$USA and dat$Canada\nW = 8763, p-value < 2.2e-16\nalternative hypothesis: true location shift is greater than 0\n95 percent confidence interval:\n 26696   Inf\nsample estimates:\ndifference in location \n              28155.27 \n```\n:::\n:::\n\n::: {#tbl-u-test-one-sided .cell tbl-cap='One-tailed Wilcoxon rank sum test between Co~2~ emissions from the USA and Canada'}\n\n```{.r .cell-code}\nbroom::tidy(w_res) %>%\n  kbl() %>%\n  kable_paper(\"hover\", full_width = F)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper lightable-hover\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> estimate </th>\n   <th style=\"text-align:right;\"> statistic </th>\n   <th style=\"text-align:right;\"> p.value </th>\n   <th style=\"text-align:right;\"> conf.low </th>\n   <th style=\"text-align:right;\"> conf.high </th>\n   <th style=\"text-align:left;\"> method </th>\n   <th style=\"text-align:left;\"> alternative </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 28155.27 </td>\n   <td style=\"text-align:right;\"> 8763 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 26696 </td>\n   <td style=\"text-align:right;\"> Inf </td>\n   <td style=\"text-align:left;\"> Wilcoxon rank sum test with continuity correction </td>\n   <td style=\"text-align:left;\"> greater </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n# The Wilcoxon signed-rank test {#sec-signed-rank-test}\n\nThe Wilcoxon signed ranks test also known as the Wilcoxon matched pairs test, is similar to the sign test. The only alteration is that we rank the differences ignoring their signs (but we do keep a note of them). As the name implies, we use the Wilcoxon matched pairs test on related data, so each sample or group will be equal in size.\n\n## The Method\n\n-   Calculate the difference values between your two samples of data. We then remove difference values of zero.\n-   Rank them. If values are tied then you use the same method as in the Mann-Whitney tests. You assign the difference scores the average rank if it was possible to separate the tied difference scores.\n-   The ranks of the differences can now have the sign of the difference reattached.\n-   The sum of the positive ranks are calculated.\n-   The sum of the negative ranks are calculated.\n-   You then choose the smaller sum of ranks and we call this our $T$ value, which we compare with significance tables. You choose the row which has the number of pairs of values in your sample.\n-   Report your findings and make your conclusion.\n\n## Example code for a paired two-tailed test in R\n\nSince this a paired test we will test if there is difference in emission between two time periods say 2000 and 2020 across all the countries in our dataset. Our null hypothesis $H_0$ is that there is not difference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_m <- dat %>% dplyr::select(-Year) %>% as.matrix()\nrownames(dat_m) <- dat$Year\ndat_t <- t(dat_m)\nx <- as.numeric(dat_t[,\"2000\"])\ny <- as.numeric(dat_t[,\"2020\"])\n\n(w_res <- wilcox.test(x, y, conf.int = TRUE, paired = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWilcoxon signed rank exact test\n\ndata:  x and y\nV = 119, p-value = 0.5803\nalternative hypothesis: true location shift is not equal to 0\n95 percent confidence interval:\n -3848.5   621.5\nsample estimates:\n(pseudo)median \n          -297 \n```\n:::\n:::\n\n::: {#tbl-signed-two-sided .cell tbl-cap='Two-tailed Wilcoxon signed rank test between Co~2~ emissions from 2000 and 2020'}\n\n```{.r .cell-code}\nbroom::tidy(w_res) %>%\n  kbl() %>%\n  kable_paper(\"hover\", full_width = F)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper lightable-hover\" style='font-family: \"Arial Narrow\", arial, helvetica, sans-serif; width: auto !important; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> estimate </th>\n   <th style=\"text-align:right;\"> statistic </th>\n   <th style=\"text-align:right;\"> p.value </th>\n   <th style=\"text-align:right;\"> conf.low </th>\n   <th style=\"text-align:right;\"> conf.high </th>\n   <th style=\"text-align:left;\"> method </th>\n   <th style=\"text-align:left;\"> alternative </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> -297 </td>\n   <td style=\"text-align:right;\"> 119 </td>\n   <td style=\"text-align:right;\"> 0.580338 </td>\n   <td style=\"text-align:right;\"> -3848.5 </td>\n   <td style=\"text-align:right;\"> 621.5 </td>\n   <td style=\"text-align:left;\"> Wilcoxon signed rank exact test </td>\n   <td style=\"text-align:left;\"> two.sided </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.26/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.12.1/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.12.1/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}